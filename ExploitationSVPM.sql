--Partie 3

--QUESTION 3 YIHAN

DECLARE @MinInterventions INT;
DECLARE @MaxInterventions INT;
DECLARE @AvgInterventions INT;
DECLARE @TotalInterventions INT;


SET @MinInterventions = dbo.udfGetStatsInterventions('MIN');
SET @MaxInterventions = dbo.udfGetStatsInterventions('MAX');
SET @AvgInterventions = dbo.udfGetStatsInterventions('MOY');
SET @TotalInterventions = dbo.udfGetStatsInterventions('TOT');

--Question 3 and 4


SELECT 
    t.PDQ, -- 55 postes
    t.TotalInterventions AS [Nb. d'interventions répertoriées],
    CAST(ROUND(100.0 * t.TotalInterventions / @TotalInterventions, 4) AS NVARCHAR) + ' %' AS [% du nb. total d'interventions], -- calculation de %
    CASE
        WHEN t.TotalInterventions = @MinInterventions 
            THEN 'PDQ avec le moins d''interventions répertoriées'
        WHEN t.TotalInterventions = @MaxInterventions 
            THEN 'PDQ avec le plus d''interventions répertoriées'
        WHEN t.TotalInterventions BETWEEN @AvgInterventions * 0.9 AND @AvgInterventions * 1.1 
            THEN 'PDQ avec un nombre d''interventions proche de la moyenne'
        WHEN t.TotalInterventions <= @AvgInterventions * 0.5 
            THEN 'PDQ avec un nombre relativement faible d''interventions'
        WHEN t.TotalInterventions >= @AvgInterventions * 1.5 
            THEN 'PDQ avec un nombre important d''interventions'
        ELSE NULL
    END
FROM 
    (SELECT 
        POSTE_DE_QUARTIER.ID_PDQ AS PDQ, -- 55 postes
        COUNT(*) AS TotalInterventions
     FROM 
        INTERVENTION
     JOIN 
        INTERVENTION_AGENT ON INTERVENTION.ID_INTERVENTION = INTERVENTION_AGENT.ID_INTERVENTION
     JOIN 
        AGENT ON INTERVENTION_AGENT.MATRICULE_AGENT = AGENT.MATRICULE
     JOIN 
        POSTE_DE_QUARTIER ON AGENT.PDQ = POSTE_DE_QUARTIER.ID_PDQ
     GROUP BY 
        POSTE_DE_QUARTIER.ID_PDQ
    ) AS t
ORDER BY 
    t.PDQ;




--question 4  YIHAN
DROP PROCEDURE IF EXISTS spInitSuiviInterventions;
GO

CREATE PROCEDURE spInitSuiviInterventions
AS
BEGIN

	DROP TABLE IF EXISTS suiviInterventions

    CREATE TABLE suiviInterventions (
        poste_de_quartier INT,
        annee_mois CHAR(7), -- YYYY-MM
        quart_de_travail VARCHAR(10),
        nb_interventions INT
    );



    INSERT INTO suiviInterventions (poste_de_quartier, annee_mois, quart_de_travail, nb_interventions)
    SELECT
        PDQ.ID_PDQ AS poste_de_quartier, 
        FORMAT(INTERVENTION.DATE_INCIDENT, 'yyyy-MM') AS annee_mois,
        QUART_TRAVAIL.LIBELLÉ AS quart_de_travail,  --COLUMN JOUR NUIT SOIR
        COUNT(*) AS nb_interventions
    FROM
        INTERVENTION
    INNER JOIN
        POSTE_DE_QUARTIER PDQ ON INTERVENTION.ID_QUART_TRAVAIL = PDQ.ID_PDQ 
    INNER JOIN
        QUART_TRAVAIL ON INTERVENTION.ID_QUART_TRAVAIL = QUART_TRAVAIL.ID 
    GROUP BY
        PDQ.ID_PDQ,
        FORMAT(INTERVENTION.DATE_INCIDENT, 'yyyy-MM'),
        QUART_TRAVAIL.LIBELLÉ;

   
    SELECT 
        poste_de_quartier AS [Poste de quartier],
        annee_mois AS [Année Mois],
        quart_de_travail AS [Quart de travail],
        nb_interventions AS [Nb. d'interventions répertoriées]
    FROM 
        suiviInterventions
    ORDER BY 
        poste_de_quartier, annee_mois,
        CASE  -- I tried to make the order by JOUR NUIT SOIR for each month but it is not working at all
            WHEN quart_de_travail = 'JOUR' THEN 1
            WHEN quart_de_travail = 'NUIT' THEN 2
            WHEN quart_de_travail = 'SOIR' THEN 3
            ELSE 4
        END;
END;
GO



-- Execute the Procedure
EXEC spInitSuiviInterventions;

-- Query the Table
SELECT * FROM suiviInterventions ORDER BY 1, 2, 3; 

